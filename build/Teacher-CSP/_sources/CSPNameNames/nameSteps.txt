..  Copyright (C)  Mark Guzdial, Barbara Ericson, Briana Morrison
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3 or
    any later version published by the Free Software Foundation; with
    Invariant Sections being Forward, Prefaces, and Contributor List,
    no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
    is included in the section entitled "GNU Free Documentation License".

.. |bigteachernote| image:: Figures/apple.jpg
    :width: 50px
    :align: top
    :alt: teacher note

.. 	qnum::
	:start: 1
	:prefix: csp-6-3-
	
.. highlight:: java
   :linenothreshold: 4

Nombrar conjuntos de pasos
==========================

¿Cómo se han definido `abs` e `int`? *Definiendo* un nuevo  procedimiento o una función podemos asociar un nombre con una secuencia de pasos. Observa el siguiente programa. ¿Qué crees que ocurrirá cuando pulses el botón de ejecutar? Haz clic en *Run* y mira lo que sucede.

.. activecode:: First_Function
  :tour_1: "Line by line tour"; 1: dsq-line1; 2: dsq-line2; 3: dsq-line3; 4: dsq-line4; 5: dsq-line5; 6: dsq-line6; 7: dsq-line7; 8: dsq-line8; 9: dsq-line9;
  :nocodelens:

  def cuadrado(unaTortuga):
      unaTortuga.forward(100)
      unaTortuga.right(90)
      unaTortuga.forward(100)
      unaTortuga.right(90)
      unaTortuga.forward(100)
      unaTortuga.right(90)
      unaTortuga.forward(100)
      unaTortuga.right(90)

Si te pensando por qué parece que no ocurre nada cuando pulsas el botón *Run*, observa que lo que hace el programa es definir el procedimiento ``cuadrado``, que recoge com entrada una tortuga definida como ``unaTortuga``. Si queremos que el programa ejecute realmente algo más tendremos que crear una tortuga y **llamar** al procedimiento como lo hacemos en el siguiente ejemplo.

..	index::
	single: def
	single: functions
	single: calling functions

.. activecode:: First_Function_Call
  :tour_1: "Important lines tour"; 1-9: dsq2-line1-9; 11-13: dsq2-line11-13; 14: dsq2-line14;
  :nocodelens:

  def cuadrado(unaTortuga):
      unaTortuga.forward(100)
      unaTortuga.right(90)
      unaTortuga.forward(100)
      unaTortuga.right(90)
      unaTortuga.forward(100)
      unaTortuga.right(90)
      unaTortuga.forward(100)
      unaTortuga.right(90)

  from turtle import * 	# usa la libreria turtle
  espacio = Screen()     	# crea el espacio para la tortuga
  Mario = unaTortuga()    	# crea la tortuga Mario
  cuadrado(Mario)       	# dibuja un cuadrado con Mario
  
..	index::
	single: parameter
	pair: programming; parameter    

En el ejemplo anterior *DEFinimos* la palabra ``cuadrado`` para representar las instrucciones de Python con las que dibujaremos un cuadrado utilizando una tortuga. El procedimiento ``cuadrado`` toma ``unaTortuga`` como dato de entrada, y con ella dibujará el cuadrado. Observa que la secuencia de instrucciones incluidas en el procedimiento ``cuadrado`` está indentada. Esto es, que las líneas de instrucciones no comienzan en la primera columna, debajo de la palabra ``def``, sino unas posiciones más a la derecha. Python utiliza la indentación para mostrar qué instrucciones forman parte del procedimiento. El hecho de que la línea ``from turtle import *`` no esté indentada significa que esa instrucción y las siguientes ya no forman parte del procedimiento ``cuadrado``.

.. Nota::
   Observa que hemos definido el procedimiento ``def cuadrado(unaTortuga):`` antes de intentar utilizarlo con ``cuadrado(Mario)``. En Python es necesario que suceda en ese orden, pero no lo es en otros lenguajes de programación.

.. mchoicemf:: 6_3_1_Functions_Q2
   :answer_a: Es un procedimiento.
   :answer_b: Es una función.
   :correct: b
   :feedback_a: Devuelve un valor, luego es una función.
   :feedback_b: Si devuelve un valor no puede ser un procedimiento.

   ¿Es ``abs`` un procedimiento, o una función?
   
.. mchoicemf:: 6_3_2_Functions_Q3
   :answer_a: Es un procedimiento.
   :answer_b: Es una función.
   :correct: a
   :feedback_a: No devuelve ningún valor, así que es un procedimiento.
   :feedback_b: No puede ser una función, porque no devuelve ningún valor.

   ¿Es ``cuadrado`` un procedimiento o una función?
   
Fíjate atentamente en el siguiente vídeo para saber cómo resolver el problema de código desordenado.

.. video:: indentVideo
		   :controls:
		   :thumb: ../_static/video-mixedUpCodeIndent.png

		   http://ice-web.cc.gatech.edu/ce21/1/static/video/IndentVideo.mov
		   http://ice-web.cc.gatech.edu/ce21/1/static/video/IndentVideo.webm
   
.. parsonsprob:: 6_3_3_Triangle_Procedure

   El siguiente código debería definir un procedimiento que dibuje un triángulo, pero puede que las instrucciones estén desordenadas, e incluso *puede que contenga algunas líneas de código inútil*. Arrastra a la parte derecha y en el orden correcto las líneas de código que se necesiten. <b>¡Recuerda que las líneas de instrucciones que forman parte del procedimiento deben estar indentadas1</b>. Para indentar esas líneas arrástralas un poco más a la derecha.
 
   -----
   def triangulo(unaTortuga):
   =====
       unaTortuga.left(60)
       unaTortuga.forward(100)
       unaTortuga.right(120)
       unaTortuga.forward(100)
       unaTortuga.right(120)
       unaTortuga.forward(100)
       unaTortuga.right(120)  
   ===== 
       endDef #distractor

